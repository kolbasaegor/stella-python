language core;

fn Bool::not(x : Bool) -> Bool {
  return if x then false else true;
}

fn Nat::add(n : Nat) -> (fn(Nat) -> Nat) {
  return fn(m : Nat) {
    return Nat::rec(n, m, fn(i : Nat) {
      return fn(r : Nat) { return succ(r); }; });
  };
}

fn twice(f : fn(Bool) -> Bool) -> (fn(Bool) -> Bool) {
  return fn(x : Bool) {
    return true;
  };
}

fn main(b : Bool) -> Bool {
  return twice(Bool::not)(b);
}